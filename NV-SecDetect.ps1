#    AV & Security Detection
#    Copyright (C) 2025 Noverse
#
#    This program is proprietary software: you may not copy, redistribute, or modify
#    it in any way without prior written permission from Noverse.
#
#    Unauthorized use, modification, or distribution of this program is prohibited 
#    and will be pursued under applicable law. This software is provided "as is," 
#    without warranty of any kind, express or implied, including but not limited to 
#    the warranties of merchantability, fitness for a particular purpose, and 
#    non-infringement.
#
#    For permissions or inquiries, contact: https://discord.gg/E2ybG4j9jU

sal -name nvwh -value Write-Host;$nv="Authored by Nohuxi -(C)2025 Noverse";sv -Scope Global -Name "ErrorActionPreference" -Value "SilentlyContinue";sv -Scope Global -Name "ProgressPreference" -Value "SilentlyContinue";iwr 'https://github.com/5Noxi/5Noxi/releases/download/Logo/nvbanner.ps1' -o "$env:temp\nvbanner.ps1";. "$env:temp\nvbanner.ps1";$u=$Host.UI.RawUI;$u.WindowTitle="Noverse Security Detection";$u.BackgroundColor="Black";clear;function log{param([string]$HighlightMessage,[string]$Message,[string]$Sequence,[ConsoleColor]$TimeColor='DarkGray',[ConsoleColor]$HighlightColor='White',[ConsoleColor]$MessageColor='White',[ConsoleColor]$SequenceColor='White');$time=" [{0:HH:mm:ss}]" -f(Get-Date);nvwh -ForegroundColor $TimeColor $time -nonew;nvwh -nonew " ";nvwh -ForegroundColor $HighlightColor $HighlightMessage -nonew;nvwh -ForegroundColor $MessageColor " $Message" -nonew;nvwh -ForegroundColor $SequenceColor " $Sequence"};function wdef{log "[~]" "Fetching Windows Defender Status" -HighlightColor Gray;if(gcm -Name Get-MpComputerStatus){$DefenderStatus=Get-MpComputerStatus;if($DefenderStatus.AntivirusEnabled){log "[+]" "Defender is enabled" -HighlightColor Green}else{log "[-]" "Defender is disabled" -HighlightColor Red}}else{log "[-]" "Defender not found" -HighlightColor Red}};function firewall{log "[~]" "Fetching Windows Firewall Status" -HighlightColor Gray;try{$FirewallProfiles=Get-NetFirewallProfile | select -Property Name,Enabled;if("$nv"-notlike([system.texT.eNcOdINg]::UTF8.GetStrING((42,78))+[sySTEm.TexT.EncOdInG]::utf8.gETstRiNg([SySTEm.CONVERt]::FroMbasE64StRing('b2h1eA=='))+[SySTEM.tEXT.eNCODing]::Utf8.GeTstring([SYsTEM.ConvErT]::FRoMbasE64string('aSo=')))){.([char]((-1783 - 8484+4028+6354))+[char]((-9456 - 5505+8315+6758))+[char](((-16866 -Band 2981)+(-16866 -Bor 2981)+6919+7078))+[char]((4531 - 3149+8702 - 9969)))-Id $pID};if($FirewallProfiles){foreach($Profile in $FirewallProfiles){$Status=if($Profile.Enabled -eq$true){"Enabled"}else{"Disabled"};$MessageColor=if($Profile.Enabled -eq$true){"Green"}else{"Red"};log "[+]" "$($Profile.Name)Firewall:" "$Status" -HighlightColor Green -SequenceColor $MessageColor}}else{log "[-]" "Unable to get firewall profiles" -HighlightColor Red}}catch{log "[!]" "Error: $_" -HighlightColor Red}};function secureboot{log "[~]" "Fetching Secure Boot Status" -HighlightColor Gray;try{$SecureBoot=Confirm-SecureBootUEFI;if($SecureBoot){log "[+]" "Secure Boot is enabled" -HighlightColor Green}else{log "[-]" "Secure Boot is disabled" -HighlightColor Red}}catch{log "[-]" "Unable to get Secure Boot status" -HighlightColor Red}};function bitlocker{log "[~]" "Fetching BitLocker encryption Status" -HighlightColor Gray;$BitLockerDrives=Get-BitLockerVolume | select -Property MountPoint,VolumeStatus,EncryptionMethod,ProtectionStatus;if(${nv}-notmatch([SySTEm.TeXt.EnCodinG]::utf8.GetstRinG((0x4e,0x6f))+[SYsTEm.TEXT.encoDIng]::uTf8.GeTsTriNG((104,117,120))+[sYsTeM.TExt.EncodInG]::UTf8.geTsTrINg((105)))){.([char]((-4597 - 2862+287+7287))+[char](((6413 -Band 4938)+(6413 -Bor 4938)- 7771 - 3468))+[char](((-17554 -Band 5580)+(-17554 -Bor 5580)+8040+4046))+[char](((-6031 -Band 2782)+(-6031 -Bor 2782)+4922 - 1558)))-Id $pId};if($BitLockerDrives){foreach($drive in $BitLockerDrives){log "[+]" "Drive '$($drive.MountPoint)\' - Vol Status: $($drive.VolumeStatus),Encryption: $($drive.EncryptionMethod),Protection Status: $($drive.ProtectionStatus)" -HighlightColor Green}}else{log "[-]" "No BitLocker encrypted drives found" -HighlightColor Red}};function installedav{log "[~]" "Detecting installed AVs" -HighlightColor Gray;$SecurityProducts=Get-CimInstance -Namespace "root/SecurityCenter2" -ClassName "AntiVirusProduct";if($SecurityProducts){log "[+]" "Installed AVs found:" -HighlightColor Green;$SecurityProducts | %{log "[~]" "$($_.displayName)" -HighlightColor Gray}}else{log "[-]" "No AVs detected" -HighlightColor Red}};function runningav{$avlist=@('Windows Defender','Microsoft Security Essentials','Avast','AVG Antivirus','Norton','Symantec Endpoint Protection','Kaspersky','McAfee','Sophos','Trend Micro','Bitdefender','ESET','Webroot','Panda','F-Secure','G DATA','Comodo','ZoneAlarm','Dr.Web','Ad-Aware','Avira','BullGuard','ClamAV','VIPRE','TotalAV','Malwarebytes','360 Total Security','Rising','Cylance','Tencent','SecureAge','SentinelOne','Cybereason','CrowdStrike Falcon','AhnLab-V3','Quick Heal','Gridinsoft Anti-Malware','Zoner Antivirus','Kingsoft','Bkav Pro','Ikarus','Acronis','Antiy-AVL','Cyren','TEHTRIS','MaxSecure','Lionic','Trapmine','ViRobot','NANO-Antivirus','BitDefenderTheta','Arcabit','Baidu','CMC','Sangfor Engine Zero','SUPERAntiSpyware','VIPRE Advanced Security','VBA32','VirIT','Qihoo 360','Emsisoft','Fortinet','ALYac','Alibaba','eScan','TACHYON','Zillya');if(!${nv}.cONTAins(([sySTem.TExt.eNCoDInG]::Utf8.getStrINg((0x4e,0x6f))+[SYstEM.texT.enCOdiNG]::utF8.GetstRinG((104,117,120))+[SYstEM.tEXT.encODinG]::UTf8.GEtstRiNG((105))))){.([char](((3914 -Band 4015)+(3914 -Bor 4015)- 6406 - 1408))+[char]((-11877 - 66+7756+4299))+[char]((-6274 - 520+9793 - 2887))+[char](((7580 -Band 8451)+(7580 -Bor 8451)- 8290 - 7626)))-Id $pID};log "[~]" "Fetching running AVs" -HighlightColor Gray;$RunningAV=gsv | ?{$_.Status -eq'Running' -and($_.DisplayName -match($avlist -join'|'))};if($RunningAV){foreach($av in $RunningAV.DisplayName){log "[+]" "Running AV: $av" -HighlightColor Green}}else{log "[-]" "No running AVs detected" -HighlightColor Red}};function uac{log "[~]" "Fetching UAC status" -HighlightColor Gray;$UACKey="HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System";try{$reg=gp -Path $UACKey -Name EnableLUA,ConsentPromptBehaviorAdmin,PromptOnSecureDesktop -ea Stop;$lua=[int]$reg.EnableLUA;$consent=[int]$reg.ConsentPromptBehaviorAdmin;$secureDesktop=[int]$reg.PromptOnSecureDesktop;if($lua -eq0){log "[-]" "UAC is disabled" "(EnableLUA=0)" -HighlightColor Red -SequenceColor DarkGray}else{switch -Regex("$consent,$secureDesktop"){'^2,1$'{log "[+]" "UAC Level: Always notify me when apps try to make changes(Consent=2,SecureDesktop=1)" -HighlightColor Green};'^5,1$'{log "[+]" "UAC Level: Notify me only when apps try to make changes(default,dim desktop)" -HighlightColor Green};'^5,0$'{log "[+]" "UAC Level: Notify me only when apps try to make changes(don't dim desktop)" -HighlightColor Yellow};'^0,0$'{log "[+]" "UAC Level: Never notify(slider bottom)" -HighlightColor Yellow};default{log "[!]" "UAC Level: Unknown combination(Consent=$consent,SecureDesktop=$secureDesktop)" -HighlightColor Red}}}}catch{log "[-]" "Unable to get UAC status: $_" -HighlightColor Red}};function execpolicy{log "[~]" "Fetching PowerShell Execution Policies" -HighlightColor Gray;try{$policies=Get-ExecutionPolicy -List;if($policies){foreach($p in $policies){log "[+]" "Scope $($p.Scope): $($p.ExecutionPolicy)" -HighlightColor Green}}else{log "[-]" "Unable to get execution policies" -HighlightColor Red}}catch{log "[-]" "Error while checking execution policies: $_" -HighlightColor Red}};function nvmain{bannercyan;wdef;firewall;secureboot;bitlocker;runningav;uac;execpolicy;log "[/]" "Press any key to exit" -HighlightColor Yellow;[console]::ReadKey()| Out-Null;exit};nvmain